name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: sms-terminal
            asset_name: sms-terminal-linux-x64
            features: ""
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: sms-terminal
            asset_name: sms-terminal-linux-x64-sentry
            features: "--features sentry"
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: sms-terminal
            asset_name: sms-terminal-linux-aarch64
            features: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: sms-terminal
            asset_name: sms-terminal-linux-aarch64-sentry
            features: "--features sentry"
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            artifact_name: sms-terminal.exe
            asset_name: sms-terminal-windows-x64
            features: ""
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            artifact_name: sms-terminal.exe
            asset_name: sms-terminal-windows-x64-sentry
            features: "--features sentry"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang pkg-config

      - name: Install bindgen-cli (required for aws-lc-sys)
        run: cargo install --force --locked bindgen-cli

      - name: Install cross-compilation dependencies (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation dependencies (Windows)
        if: contains(matrix.target, 'windows')
        run: |
          sudo apt-get install -y gcc-mingw-w64

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binary
        env:
          BINDGEN_EXTRA_CLANG_ARGS: "-I/usr/include"
        run: cargo build --release --target ${{ matrix.target }} ${{ matrix.features }}

      - name: Strip binary (Linux)
        if: runner.os == 'Linux' && !contains(matrix.target, 'windows')
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/sms-terminal
          else
            strip target/${{ matrix.target }}/release/sms-terminal
          fi

      - name: Strip binary (Windows)
        if: contains(matrix.target, 'windows')
        run: |
          x86_64-w64-mingw32-strip target/${{ matrix.target }}/release/sms-terminal.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## What's Changed
            
            Automated release for version ${{ github.ref_name }}
            
            ### Downloads
            - **Linux x64**: sms-terminal-linux-x64
            - **Linux x64 with Sentry**: sms-terminal-linux-x64-sentry
            - **Linux ARM64**: sms-terminal-linux-aarch64
            - **Linux ARM64 with Sentry**: sms-terminal-linux-aarch64-sentry
            - **Windows x64**: sms-terminal-windows-x64.exe
            - **Windows x64 with Sentry**: sms-terminal-windows-x64-sentry.exe

      - name: Upload Linux x64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sms-terminal-linux-x64/sms-terminal
          asset_name: sms-terminal-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload Linux x64 with Sentry binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sms-terminal-linux-x64-sentry/sms-terminal
          asset_name: sms-terminal-linux-x64-sentry
          asset_content_type: application/octet-stream

      - name: Upload Linux ARM64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sms-terminal-linux-aarch64/sms-terminal
          asset_name: sms-terminal-linux-aarch64
          asset_content_type: application/octet-stream

      - name: Upload Linux ARM64 with Sentry binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sms-terminal-linux-aarch64-sentry/sms-terminal
          asset_name: sms-terminal-linux-aarch64-sentry
          asset_content_type: application/octet-stream

      - name: Upload Windows x64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sms-terminal-windows-x64/sms-terminal.exe
          asset_name: sms-terminal-windows-x64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows x64 with Sentry binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sms-terminal-windows-x64-sentry/sms-terminal.exe
          asset_name: sms-terminal-windows-x64-sentry.exe
          asset_content_type: application/octet-stream